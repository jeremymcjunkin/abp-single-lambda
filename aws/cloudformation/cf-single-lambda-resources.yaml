AWSTemplateFormatVersion: '2010-09-09'

Description: Single Labmda.  
  Naming convention, [stage]--[repo]--[branch]--[eyecatcher]--r
  SSL only, custom DomainName, custom header to verify requests come through CloudFront, Edge Gzip, Caching OPTIONS

Parameters:

  LambdaName:
    Description: Lambda function name (should not exist when creating test, will when creating production/staging).  This value will be prepended with [Repo]--[Branch]--
    Type: String
    Default: YourLambdaNameHere

Conditions: 
  CreateStagingResources: !Equals [ !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], prod ]

Resources:  
##### Lambda
  LambdaExecutionRole: #Use same role for staging and production
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]        
      Path: /
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - "s3:*"
                Effect: Allow
                Resource:
                  - "arn:aws:s3:::deep-link.yourdomain.com"
                  - "arn:aws:s3:::deep-link.yourdomain.com*"
##### End Lambda


Outputs:
  Version:
    Description: CF-Single-Lambda template version
    Value: 1.0.0

  LambdaExecutionRoleArn:
    Description: Lambda execution role
    Value: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}

  FullLambdaName:
    Description: Full lambda name
    Value: !Sub
      - ${Repo}--${Branch}--${LambdaName}
      - { LambdaName: !Ref LambdaName, Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ] }          

  RunSsmSetLambdaExecutionRoleCmd:
    Description: SSM command to setup lambda execution role.  Staging will use the prod value of this key
    Value: !Sub 
      - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaExecutionRoleArn' --type 'String' --value 'arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}'
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}
  
  RunSsmSetLambdaMemory:
    Description: SSM command to define lambda memory
    Value: !Sub 
      - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaMemory' --type 'String' --value 'yourMemoryHere'
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          

  RunSsmSetLambdaTimeoutKey:
    Description: SSM command to define lambda timeout
    Value: !Sub 
      - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaTimeout' --type 'String' --value 'yourTimeoutHere'
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          

  SSMEnvVarsPath:
    Description: SSM prefix where env vars should be defined
    Value: !Sub 
      - /${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaEnvs
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          

  #staging output
  RunSsmSetLambdaMemoryStaging:
    Description: SSM command to define lambda memory
    Value: !If 
      - CreateStagingResources
      - 
        !Sub 
        - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaMemory' --type 'String' --value 'yourMemoryHere'
        - { Stage: 'staging', Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          
      - NA        

  RunSsmSetLambdaTimeoutKeyStaging:
    Description: SSM command to define lambda timeout
    Value: !If 
      - CreateStagingResources
      - 
        !Sub 
        - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaTimeout' --type 'String' --value 'yourTimeoutHere'
        - { Stage: 'staging', Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}    
      - NA

  SSMEnvVarsPathStaging:
    Description: staging SSM prefix where env vars should be defined
    Value: !If 
      - CreateStagingResources
      - 
        !Sub 
        - /staging/${Repo}/${Branch}/${LambdaName}/lambdaEnvs
        - { Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}                
      - NA

  #end staging output         
